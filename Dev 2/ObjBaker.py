"""
    ObjBaker - Object Editor for Egoboo
    Copyright (C) 2009  Sean Baker

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import Tkinter
from Tooltip import *

class Main :
    def __init__(self) :
        self.root = Tkinter.Tk()
        self.load_images()
        self.create_ToolbarGeneral()
        self.create_Menubar()
        self.main_Frame = Tkinter.Frame(height=600, width=800)
        self.main_Frame.pack(fill='x')
        self.create_StatusBar()
        self.root.wm_iconbitmap(self.images[0])
        self.root.mainloop()

    def load_images(self) :
        self.images = []
        self.images.append('.\Images\egoboo1.ico')
        self.images.append(Tkinter.PhotoImage(file='.\Images\document-new.GIF'))
        self.images.append(Tkinter.PhotoImage(file='.\Images\document-open.GIF'))
        self.images.append(Tkinter.PhotoImage(file='.\Images\document-save.GIF'))
        self.images.append(Tkinter.PhotoImage(file='.\Images\edit-cut.GIF'))
        self.images.append(Tkinter.PhotoImage(file='.\Images\edit-copy.GIF'))
        self.images.append(Tkinter.PhotoImage(file='.\Images\edit-paste.GIF'))
        self.images.append(Tkinter.PhotoImage(file='.\Images\edit-delete.GIF'))

    def create_Menubar(self) :
        MenuBar = Tkinter.Menu()
        MenuBar_File = Tkinter.Menu(MenuBar)
        MenuBar.add_cascade(label='File', menu=MenuBar_File)
        MenuBar_File.add_command(label='New Object', command=self.window_sad)
        MenuBar_File.add_command(label='New Character', command=self.window_sad)
        MenuBar_File.add_command(label='New Weapon', command=self.window_sad)
        MenuBar_File.add_command(label='New Item', command=self.window_sad)
        MenuBar_File.add_command(label='New Prop', command=self.window_sad)
        MenuBar_File.add_separator()
        MenuBar_File.add_command(label='Quit', command=self.root.destroy)
        MenuBar_Help = Tkinter.Menu(MenuBar)
        MenuBar.add_cascade(label='Help', menu=MenuBar_Help)
        MenuBar_Help.add_command(label='ObjBaker Halp')
        MenuBar_Help.add_separator()
        MenuBar_Help.add_command(label='About ObjBaker', command=self.window_sad)
        self.root.configure(menu=MenuBar)
        
    def create_ToolbarGeneral(self) :
        GeneralToolbar = Tkinter.Frame(self.root, bd=2,  relief='raised')
        GeneralToolbar.pack(side='top', anchor='w', fill='x')
        GeneralToolbar_New = Tkinter.Button(GeneralToolbar, command=self.window_sad, image=self.images[1])
        GeneralToolbar_New.pack(side='left')
        GeneralToolbar_New_Tooltip = ToolTip(GeneralToolbar_New, text='New Object', delay=1000)
        GeneralToolbar_Open = Tkinter.Button(GeneralToolbar, command=self.window_sad, image=self.images[2])
        GeneralToolbar_Open.pack(side='left')
        GeneralToolbar_Open_Tooltip = ToolTip(GeneralToolbar_Open, text='Open Object', delay=1000)
        GeneralToolbar_Save = Tkinter.Button(GeneralToolbar, command=self.window_sad, image=self.images[3])
        GeneralToolbar_Save.pack(side='left')
        GeneralToolbar_Save_Tooltip = ToolTip(GeneralToolbar_Save, text='Save Object', delay=1000)
        GeneralToolbar_Cut = Tkinter.Button(GeneralToolbar, command=self.window_sad, image=self.images[4])
        GeneralToolbar_Cut.pack(side='left')
        GeneralToolbar_Cut_Tooltip = ToolTip(GeneralToolbar_Cut, text='Cut', delay=1000)

    class Object :
        def write(self) :
            datatxt =   "//Data.txt " + self.name + " \n\n\nGenerated by ObjBaker [" + self.timestamp + "]"
        def __init__(self) :
            self.name = 'New Object'
            self.EgoScript = ''
            self.timestamp = ''
        
    def create_StatusBar(self) :
        self.Statusbar = Tkinter.Frame(self.root, bd=2, relief='sunken', height=20)
        self.Statusbar.pack(side='bottom', anchor='e', fill='x')
        

    def update_ContextFocus(self, context, obj) :
        self.root.title('ObjBaker' + obj.name)
        self.create_MainArea('main', obj)
        self.create_ToolbarSpecific('main')
        
    def create_MainArea(self, context, obj) :
        if context == 'main' :
            self.f.destroy()
            self.Statusbar.destroy()
            self.f = Tkinter.Frame(self.root)
            self.f.pack(side='center')
            b_Data = Tkinter.Button(self.f, text="Edit Data", command=update_ContextFocus('Data', obj))
            b_Data.pack()
            b_EgoScript = Tkinter.Button(self.f, text="Edit EgoScript", command=update_ContextFocus('EgoScript', obj))
            b_EgoScript.pack()
            b_Part = Tkinter.Button(self.f, text="Edit Particles", command=update_ContextFocus('Particle', obj))
            b_
        elif context == 'EgoScript' :
            print 'Load EgoScript area'
            #Do summat
        elif context == 'Particle' :
            print 'load particle editor'
        elif context == 'nothing' :
            print 'load NOTHING editor'
    
    def create_ToolbarSpecific(self, context) :
        if context == 'EgoScript' :
            print 'SHTUFF'
            #load EgoScript Toolbar
        elif context == 'Particle' :
            print 'Load Particle bar'
            #load Particle Toolbar
        elif context == '' :
            print 'Load NOTHING bar'
            #DO NOTHING

    def window_sad(self) :
        top = Tkinter.Toplevel(self.root)
        top.title('Error')
        top.wm_iconbitmap(self.images[0])
        text = Tkinter.Label(top, text="This feature has not been implemented yet", justify='center')
        text.pack()
        b = Tkinter.Button(top, text="Sorry", command=top.destroy)
        b.pack(side='bottom')

if __name__ == "__main__" :
    App = Main()
